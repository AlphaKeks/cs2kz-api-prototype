{
  "openapi": "3.0.3",
  "info": {
    "title": "CS2KZ API",
    "description": "The backend API for CS2KZ",
    "contact": {
      "name": "AlphaKeks",
      "email": "alphakeks@dawn.sh"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0"
    },
    "version": "0.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "The API is up and running!",
        "description": "The API is up and running!",
        "operationId": "hello_world",
        "responses": {
          "200": {
            "description": "(͡ ͡° ͜ つ ͡͡°)"
          }
        }
      }
    },
    "/players": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Players who have joined officially approved KZ servers.",
        "description": "Players who have joined officially approved KZ servers.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 1000,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "steam_id",
                    "name",
                    "is_banned"
                  ],
                  "properties": {
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The player's latest known name."
                    },
                    "is_banned": {
                      "type": "boolean",
                      "description": "Whether this player is currently banned."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "post": {
        "tags": [
          "Players"
        ],
        "summary": "This route is used by CS2 servers for registering new players who are playing KZ for the very",
        "description": "This route is used by CS2 servers for registering new players who are playing KZ for the very\nfirst time.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "CS2 Server JWT": []
          }
        ]
      }
    },
    "/players/admins": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Players who have joined officially approved KZ servers.",
        "description": "Players who have joined officially approved KZ servers.",
        "operationId": "get_admins",
        "parameters": [
          {
            "name": "limit",
            "in": "path",
            "description": "Maximum amount of results.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 1000,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "path",
            "description": "Offset used for pagination.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "steam_id",
                    "name",
                    "roles"
                  ],
                  "properties": {
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The player's latest known name."
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      },
                      "description": "The player's roles."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/players/{player}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get a specific player by SteamID or name.",
        "description": "Get a specific player by SteamID or name.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "player",
            "in": "path",
            "description": "A player's SteamID or Name",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SteamID"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/players/{player}/roles": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get a specific player by SteamID or name.",
        "description": "Get a specific player by SteamID or name.",
        "operationId": "get_roles",
        "parameters": [
          {
            "name": "player",
            "in": "path",
            "description": "A player's SteamID or Name",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SteamID"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "bans",
                    "servers",
                    "maps",
                    "admin"
                  ]
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/players/{steam_id}/roles": {
      "put": {
        "tags": [
          "Players"
        ],
        "summary": "Overwrites the roles of the specified player.",
        "description": "Overwrites the roles of the specified player.",
        "operationId": "update_roles",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "admin"
            ]
          }
        ]
      }
    },
    "/maps": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Officially approved KZ maps.",
        "description": "Officially approved KZ maps.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mapper",
            "in": "query",
            "description": "Filter by mapper.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "global_status",
            "in": "query",
            "description": "Filter by [global status].\n\n[global status]: GlobalStatus",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GlobalStatus"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ map.",
                  "required": [
                    "id",
                    "workshop_id",
                    "name",
                    "mappers",
                    "courses",
                    "global_status",
                    "checksum",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's Steam Workshop ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of players who have contributed to creating this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of [`Course`]s which are part of this map."
                    },
                    "global_status": {
                      "$ref": "#/components/schemas/GlobalStatus"
                    },
                    "description": {
                      "type": "string",
                      "description": "The map's description.",
                      "nullable": true
                    },
                    "checksum": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's unique checksum.\n\nThis is calculated by running the map's `.vpk` file through [crc32].\n\n[crc32]: https://en.wikipedia.org/wiki/Cyclic_redundancy_check",
                      "minimum": 0
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this map was approved for globalling."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Approve a new map or update an existing one with breaking changes.",
        "description": "Approve a new map or update an existing one with breaking changes.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created [`KZMap`].",
                  "required": [
                    "map_id"
                  ],
                  "properties": {
                    "map_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "maps"
            ]
          }
        ]
      }
    },
    "/maps/{map}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Fetch a single map by ID or name.",
        "description": "Fetch a single map by ID or name.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "map",
            "in": "path",
            "description": "A map's ID or Name",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "global_status",
            "in": "query",
            "description": "Filter by [global status].\n\n[global status]: GlobalStatus",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GlobalStatus"
                }
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ map.",
                  "required": [
                    "id",
                    "workshop_id",
                    "name",
                    "mappers",
                    "courses",
                    "global_status",
                    "checksum",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's Steam Workshop ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of players who have contributed to creating this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of [`Course`]s which are part of this map."
                    },
                    "global_status": {
                      "$ref": "#/components/schemas/GlobalStatus"
                    },
                    "description": {
                      "type": "string",
                      "description": "The map's description.",
                      "nullable": true
                    },
                    "checksum": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's unique checksum.\n\nThis is calculated by running the map's `.vpk` file through [crc32].\n\n[crc32]: https://en.wikipedia.org/wiki/Cyclic_redundancy_check",
                      "minimum": 0
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this map was approved for globalling."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/maps/{map_id}": {
      "patch": {
        "tags": [
          "Maps"
        ],
        "summary": "Update a map with non-breaking changes.",
        "description": "Update a map with non-breaking changes.",
        "operationId": "update",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "description": "The map's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "maps"
            ]
          }
        ]
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Officially approved KZ servers.",
        "description": "Officially approved KZ servers.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "Filter by server owner.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owned_by",
                    "approved_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string"
                    },
                    "ip_address": {
                      "type": "string"
                    },
                    "owned_by": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "approved_on": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "post": {
        "tags": [
          "Servers"
        ],
        "summary": "Approve a new KZ server.",
        "description": "Approve a new KZ server.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewServer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created [`Server`].",
                  "required": [
                    "server_id",
                    "api_key"
                  ],
                  "properties": {
                    "server_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "api_key": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The server's semi-permanent API Key.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/{server}": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Fetch a single server by ID or name.",
        "description": "Fetch a single server by ID or name.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "A server's ID or Name",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owned_by",
                    "approved_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string"
                    },
                    "ip_address": {
                      "type": "string"
                    },
                    "owned_by": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "approved_on": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/servers/{server_id}": {
      "patch": {
        "tags": [
          "Servers"
        ],
        "summary": "Update a server.",
        "description": "Update a server.",
        "operationId": "update",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/{server_id}/key": {
      "put": {
        "tags": [
          "Servers"
        ],
        "summary": "Replace the key for a specific server with a new, random, one.",
        "description": "Replace the key for a specific server with a new, random, one.",
        "operationId": "replace_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created [`Server`].",
                  "required": [
                    "server_id",
                    "api_key"
                  ],
                  "properties": {
                    "server_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "api_key": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The server's semi-permanent API Key.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Servers"
        ],
        "summary": "Delete a server's API Key. This effectively deglobals the server until an admin generates a new",
        "description": "Delete a server's API Key. This effectively deglobals the server until an admin generates a new\nkey again.",
        "operationId": "delete_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/bans": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Player Bans.",
        "description": "Player Bans.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Filter by ban reason.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.\n\nThis can either be an ID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "banned_by",
            "in": "query",
            "description": "Filter by admin.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "has_expired",
            "in": "query",
            "description": "Filter by bans which have (not) expired yet.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player ban.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "plugin_version",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/BannedPlayer"
                    },
                    "reason": {
                      "type": "string",
                      "description": "The reason for the ban."
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Server"
                        }
                      ],
                      "nullable": true
                    },
                    "plugin_version": {
                      "type": "string",
                      "description": "The cs2kz plugin version at the time of the ban.\n\nThis is either the version the [`server`] was currently running on, or the latest\ncurrent version, if they player got banned by an admin directly.\n\n[`server`]: Ban::server"
                    },
                    "banned_by": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Player"
                        }
                      ],
                      "nullable": true
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was issued."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.",
                      "nullable": true
                    },
                    "unban": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Unban"
                        }
                      ],
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "post": {
        "tags": [
          "Bans"
        ],
        "summary": "Ban a player.",
        "description": "Ban a player.",
        "operationId": "create",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created [`Ban`].",
                  "required": [
                    "ban_id"
                  ],
                  "properties": {
                    "ban_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The ban's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "bans"
            ]
          },
          {
            "CS2 Server JWT": []
          }
        ]
      }
    },
    "/bans/{ban_id}": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Get a specific ban by ID.",
        "description": "Get a specific ban by ID.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player ban.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "plugin_version",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/BannedPlayer"
                    },
                    "reason": {
                      "type": "string",
                      "description": "The reason for the ban."
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Server"
                        }
                      ],
                      "nullable": true
                    },
                    "plugin_version": {
                      "type": "string",
                      "description": "The cs2kz plugin version at the time of the ban.\n\nThis is either the version the [`server`] was currently running on, or the latest\ncurrent version, if they player got banned by an admin directly.\n\n[`server`]: Ban::server"
                    },
                    "banned_by": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Player"
                        }
                      ],
                      "nullable": true
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was issued."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.",
                      "nullable": true
                    },
                    "unban": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Unban"
                        }
                      ],
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "patch": {
        "tags": [
          "Bans"
        ],
        "summary": "Update an existing ban.",
        "description": "Update an existing ban.",
        "operationId": "update",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "bans"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Bans"
        ],
        "summary": "Player Unbans.",
        "description": "Player Unbans.",
        "operationId": "unban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUnban"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created Unban.",
                  "required": [
                    "unban_id"
                  ],
                  "properties": {
                    "unban_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The unban's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "bans"
            ]
          }
        ]
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Redirects the user to Steam to log in, and then back to `return_to` after a successful",
        "description": "Redirects the user to Steam to log in, and then back to `return_to` after a successful\nlogin.",
        "operationId": "login",
        "parameters": [
          {
            "name": "return_to",
            "in": "query",
            "description": "The URL to return to after logging in.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "303": {
            "description": ""
          },
          "400": {
            "description": ""
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Invalidates the user's current session and clears out any cookies.",
        "description": "Invalidates the user's current session and clears out any cookies.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "return_to",
            "in": "query",
            "description": "URL to redirect back to.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uri",
              "nullable": true
            }
          }
        ],
        "responses": {
          "303": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/auth/steam/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "callback",
        "parameters": [
          {
            "name": "openid.return_to",
            "in": "path",
            "description": "The API's domain, if valid.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "openid.mode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.ns",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.op_endpoint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.claimed_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "openid.identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "openid.response_nonce",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.invalidate_handle",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "openid.assoc_handle",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.signed",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.sig",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "303": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/auth/servers/refresh_key": {
      "put": {
        "tags": [
          "Auth"
        ],
        "operationId": "refresh_key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "JWT for server authentication."
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Admin": {
        "type": "object",
        "required": [
          "steam_id",
          "name",
          "roles"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's latest known name."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "The player's roles."
          }
        }
      },
      "Ban": {
        "type": "object",
        "description": "A player ban.",
        "required": [
          "id",
          "player",
          "reason",
          "plugin_version",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ban's ID.",
            "minimum": 0
          },
          "player": {
            "$ref": "#/components/schemas/BannedPlayer"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the ban."
          },
          "server": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ],
            "nullable": true
          },
          "plugin_version": {
            "type": "string",
            "description": "The cs2kz plugin version at the time of the ban.\n\nThis is either the version the [`server`] was currently running on, or the latest\ncurrent version, if they player got banned by an admin directly.\n\n[`server`]: Ban::server"
          },
          "banned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban was issued."
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban will expire.",
            "nullable": true
          },
          "unban": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Unban"
              }
            ],
            "nullable": true
          }
        }
      },
      "BanUpdate": {
        "type": "object",
        "description": "An update to a [`Ban`].",
        "properties": {
          "reason": {
            "type": "string",
            "description": "A new ban reason.",
            "nullable": true
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "A new expiration date.",
            "nullable": true
          }
        }
      },
      "BannedPlayer": {
        "type": "object",
        "required": [
          "steam_id",
          "name"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The player's IP address at the time of their ban.",
            "nullable": true
          }
        }
      },
      "Course": {
        "type": "object",
        "description": "A map course.",
        "required": [
          "id",
          "stage",
          "mappers",
          "filters"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The course's description.",
            "nullable": true
          },
          "stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The course's stage.",
            "minimum": 0
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of the players who have contributed to creating this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "List of filters that apply to this course."
          }
        }
      },
      "CourseUpdate": {
        "type": "object",
        "description": "An update to a [`Course`].",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's [`id`].\n\n[`id`]: Course::id",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "New [name] for the course.\n\n[name]: Course::name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "New [description] for the course.\n\n[description]: Course::description",
            "nullable": true
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to add.",
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to remove.",
            "nullable": true
          },
          "filter_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterUpdate"
            },
            "description": "List of updates to [`Filter`]s.",
            "nullable": true
          }
        }
      },
      "CreatedBan": {
        "type": "object",
        "description": "A newly created [`Ban`].",
        "required": [
          "ban_id"
        ],
        "properties": {
          "ban_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ban's ID.",
            "minimum": 0
          }
        }
      },
      "CreatedServer": {
        "type": "object",
        "description": "A newly created [`Server`].",
        "required": [
          "server_id",
          "api_key"
        ],
        "properties": {
          "server_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "api_key": {
            "type": "integer",
            "format": "uint32",
            "description": "The server's semi-permanent API Key.",
            "minimum": 0
          }
        }
      },
      "CreatedUnban": {
        "type": "object",
        "description": "A newly created Unban.",
        "required": [
          "unban_id"
        ],
        "properties": {
          "unban_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The unban's ID.",
            "minimum": 0
          }
        }
      },
      "Filter": {
        "type": "object",
        "description": "A course filter.",
        "required": [
          "id",
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The filter's ID.",
            "minimum": 0
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter is for standard or pro runs."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Notes about this filter.",
            "nullable": true
          }
        }
      },
      "FilterUpdate": {
        "type": "object",
        "description": "An update to a [`Filter`].",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The filter's [`id`].\n\n[`id`]: Filter::id",
            "minimum": 0
          },
          "tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tier"
              }
            ],
            "nullable": true
          },
          "ranked_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RankedStatus"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "New [notes] for the course.\n\n[notes]: Filter::notes",
            "nullable": true
          }
        }
      },
      "GlobalStatus": {
        "type": "string",
        "description": "Global status of a map.",
        "enum": [
          "not_global",
          "in_testing",
          "global"
        ]
      },
      "Jumpstat": {
        "type": "string",
        "enum": [
          "longjump",
          "single_bhop",
          "multi_bhop",
          "weirdjump",
          "ladderjump",
          "ladderhop"
        ]
      },
      "KZMap": {
        "type": "object",
        "description": "A KZ map.",
        "required": [
          "id",
          "workshop_id",
          "name",
          "mappers",
          "courses",
          "global_status",
          "checksum",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The map's ID.",
            "minimum": 0
          },
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's Steam Workshop ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The map's name."
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of players who have contributed to creating this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Course"
            },
            "description": "List of [`Course`]s which are part of this map."
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "description": {
            "type": "string",
            "description": "The map's description.",
            "nullable": true
          },
          "checksum": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's unique checksum.\n\nThis is calculated by running the map's `.vpk` file through [crc32].\n\n[crc32]: https://en.wikipedia.org/wiki/Cyclic_redundancy_check",
            "minimum": 0
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this map was approved for globalling."
          }
        }
      },
      "Limit": {
        "type": "integer",
        "format": "uint64",
        "description": "Utility type for extracting a \"limit\" query parameter.",
        "minimum": 0
      },
      "MapIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          {
            "type": "string"
          }
        ]
      },
      "MapUpdate": {
        "type": "object",
        "description": "An update to a [`KZMap`].",
        "properties": {
          "global_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalStatus"
              }
            ],
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "New description for the map.",
            "nullable": true
          },
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "A new workshop ID.",
            "nullable": true,
            "minimum": 0
          },
          "check_steam": {
            "type": "boolean",
            "description": "Fetch the latest version of the map from Steam and update its name and checksum."
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to add.",
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to remove.",
            "nullable": true
          },
          "course_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseUpdate"
            },
            "description": "List of course updates.",
            "nullable": true
          }
        }
      },
      "Mode": {
        "type": "string",
        "enum": [
          "vanilla",
          "classic"
        ]
      },
      "NewBan": {
        "type": "object",
        "required": [
          "steam_id",
          "reason"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "ip_address": {
            "type": "string",
            "description": "The player's IP address.",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "The reason for the ban."
          }
        }
      },
      "NewCourse": {
        "type": "object",
        "required": [
          "stage",
          "mappers",
          "filters"
        ],
        "properties": {
          "stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The course's stage.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the course.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of players who have contributed to creating this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewFilter"
            },
            "description": "List of filters for this course."
          }
        }
      },
      "NewFilter": {
        "type": "object",
        "required": [
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter is for standard or pro runs."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Notes about the filter.",
            "nullable": true
          }
        }
      },
      "NewMap": {
        "type": "object",
        "required": [
          "workshop_id",
          "global_status",
          "mappers",
          "courses"
        ],
        "properties": {
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's workshop ID.",
            "minimum": 0
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "description": {
            "type": "string",
            "description": "Description of the map.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of players who have contributed to creating this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewCourse"
            },
            "description": "List of courses."
          }
        }
      },
      "NewPlayer": {
        "type": "object",
        "required": [
          "steam_id",
          "name",
          "ip_address"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's current name."
          },
          "ip_address": {
            "type": "string",
            "description": "The player's current IP address."
          }
        }
      },
      "NewServer": {
        "type": "object",
        "required": [
          "name",
          "ip_address",
          "owned_by"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The server's IP address."
          },
          "owned_by": {
            "$ref": "#/components/schemas/SteamID"
          }
        }
      },
      "NewUnban": {
        "type": "object",
        "required": [
          "reason"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason for the unban."
          }
        }
      },
      "Offset": {
        "type": "integer",
        "format": "int64",
        "description": "Utility type for extracting an \"offset\" query parameter."
      },
      "Player": {
        "type": "object",
        "required": [
          "steam_id",
          "name",
          "is_banned"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's latest known name."
          },
          "is_banned": {
            "type": "boolean",
            "description": "Whether this player is currently banned."
          }
        }
      },
      "PlayerIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SteamID"
          },
          {
            "type": "string"
          }
        ]
      },
      "RankedStatus": {
        "type": "string",
        "description": "Ranked status of a [`Filter`].\n\n[`Filter`]: crate::maps::models::Filter",
        "enum": [
          "never",
          "unranked",
          "ranked"
        ]
      },
      "RefreshToken": {
        "type": "object",
        "required": [
          "key",
          "plugin_version"
        ],
        "properties": {
          "key": {
            "type": "integer",
            "format": "uint32",
            "description": "The server's API key.",
            "minimum": 0
          },
          "plugin_version": {
            "type": "string",
            "description": "Semver cs2kz plugin version the server is currently running."
          }
        }
      },
      "Role": {
        "type": "string",
        "enum": [
          "bans",
          "servers",
          "maps",
          "admin"
        ]
      },
      "RoleFlags": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0
      },
      "Server": {
        "type": "object",
        "required": [
          "id",
          "name",
          "ip_address",
          "owned_by",
          "approved_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "owned_by": {
            "$ref": "#/components/schemas/Player"
          },
          "approved_on": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ServerIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          {
            "type": "string"
          }
        ]
      },
      "ServerUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A new name for the server.",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "A new IP address for the server.",
            "nullable": true
          },
          "owned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SteamID"
              }
            ],
            "nullable": true
          }
        }
      },
      "SteamID": {
        "type": "string"
      },
      "Style": {
        "type": "string",
        "enum": [
          "normal",
          "backwards",
          "sideways",
          "wonly"
        ]
      },
      "Tier": {
        "type": "string",
        "enum": [
          "very_easy",
          "easy",
          "medium",
          "advanced",
          "hard",
          "very_hard",
          "extreme",
          "death",
          "unfeasible",
          "impossible"
        ]
      },
      "Unban": {
        "type": "object",
        "description": "A reverted ban.",
        "required": [
          "id",
          "reason",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ID of this unban.",
            "minimum": 0
          },
          "reason": {
            "type": "string",
            "description": "The reason for the unban."
          },
          "unbanned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this unban was created."
          }
        }
      }
    },
    "securitySchemes": {
      "CS2 Server JWT": {
        "type": "http",
        "scheme": "bearer"
      },
      "Steam Session": {
        "type": "apiKey",
        "in": "cookie",
        "name": "kz-auth"
      }
    }
  }
}